{"name":"Mongoosastic","body":"# Mongoosastic\r\nA [mongoose](http://mongoosejs.com/) plugin that indexes models into [elasticsearch](http://www.elasticsearch.org/). I kept\r\nrunning into cases where I needed full text search capabilities in my\r\nmongodb based models only to discover mongodb has none. In addition to\r\nfull text search, I also needed the ability to filter ranges of data\r\npoints in the searches and even highlight matches. For these reasons,\r\nelastic search was a perfect fit and hence this project. \r\n\r\n\r\n## Installation\r\n\r\n```bash\r\nnpm install mongoosastic\r\n\r\n```\r\n\r\nOr add it to your package.json\r\n\r\n## Usage\r\n\r\nTo make a model indexed into elastic search simply add the plugin.\r\n\r\n\r\n```javascript\r\nvar mongoose     = require('mongoose')\r\n  , mongoosastic = require('mongoosastic')\r\n  , Schema       = mongoose.Schema\r\n\r\nvar User = new Schema({\r\n    name: String\r\n  , email: String\r\n  , city: String\r\n})\r\n\r\nUser.plugin(mongoosastic)\r\n```\r\n\r\nThis will by default simply use the pluralization of the model name as the index \r\nwhile using the model name itself as the type. So if you create a new\r\nUser object and save it, you can see it by navigating to\r\nhttp://localhost:9200/users/user/_search (this assumes elasticsearch is\r\nrunning locally on port 9200). \r\n\r\nThe default behavior is all fields get indexed into elasticsearch. This can be a little wasteful especially considering that\r\nthe document is now just being duplicated between mongodb and\r\nelasticsearch so you should consider opting to index only certain fields by specifying ''es_indexed'' on the \r\nfields you want to store:\r\n\r\n\r\n```javascript\r\nvar User = new Schema({\r\n    name: {type:String, es_indexed:true}\r\n  , email: String\r\n  , city: String\r\n})\r\n\r\nUser.plugin(mongoosastic)\r\n```\r\n\r\nIn this case only the name field\r\nwill be indexed for searching. \r\n\r\nFinally, adding the plugin will add a new method to the model called\r\nsearch which can be used to make simple to complex searches. \r\n\r\n```javascript\r\n\r\nUser.search({query:\"john\"}, function(err, results) {\r\n  // results here\r\n});\r\n\r\n```\r\n### Per Field Options\r\nSchemas can be configured to have special options per field. These match\r\nwith the existing [field mapping configurations](http://www.elasticsearch.org/guide/reference/mapping/core-types.html) defined by elasticsearch with the only difference being they are all prefixed by \"es_\". \r\n\r\nSo for example. If you wanted to index a book model and have the boost\r\nfor title set to 2.0 (giving it greater priority when searching) you'd\r\ndefine it as follows:\r\n\r\n```javascript\r\nvar BookSchema = new Schema({\r\n    title: {type:String, es_boost:2.0}\r\n  , author: {type:String, es_null_value:\"Unknown Author\"}\r\n  , publicationDate: {type:Date, es_type:'date'} \r\n}); \r\n\r\n```\r\nThis example uses a few other mapping fields... such as null_value and\r\ntype (which overrides whatever value the schema type is, useful if you\r\nwant stronger typing such as float).\r\n\r\n### Advanced Queries\r\nThe full query DSL of elasticsearch is exposed through the search\r\nmethod. For example, if you wanted to find all people between ages 21\r\nand 30:\r\n\r\n```javascript\r\nPerson.search({\r\n  query:{\r\n    range: {\r\n      age:{\r\n        from:21\r\n      , to: 30\r\n      }\r\n    }\r\n  }\r\n}, function(err, people){\r\n   // all the people who fit the age group are here!   \r\n});\r\n\r\n```\r\n\r\nSee the elasticsearch [Query DSL](http://www.elasticsearch.org/guide/reference/query-dsl/) docs for more information.\r\n\r\n### Hydration\r\nBy default objects returned from performing a search will be the objects\r\nas is in elastic search. This is useful in cases where only what was\r\nindexed needs to be displayed (think a list of results) while the actual\r\nmongoose object contains the full data when viewing one of the results.\r\n\r\nHowever, if you want the results to be actual mongoose objects you can\r\nprovide {hydrate:true} as the second argument to a search call.\r\n\r\n```javascript\r\n\r\nUser.search({query:\"john\"}, {hydrate:true}, function(err, results) {\r\n  // results here\r\n});\r\n\r\n```\r\n\r\nNote this will be a degree slower as it will perform an elasticsearch\r\nquery and then do a query against mongodb for all the ids returned from\r\nthe search result. \r\n\r\nYou can also default this to always be the case by providing it as a\r\nplugin option:\r\n\r\n\r\n```javascript\r\nvar User = new Schema({\r\n    name: {type:String, es_indexed:true}\r\n  , email: String\r\n  , city: String\r\n})\r\n\r\nUser.plugin(mongoosastic, {hydrate:true})\r\n```\r\n\r\n\r\n### Model.plugin(mongoosastic, options)\r\n\r\nOptions are:\r\n\r\n* `index` - the index in elastic search to use. Defaults to the\r\n  pluralization of the model name.\r\n* `type`  - the type this model represents in elastic search. Defaults\r\n  to the model name.\r\n* `host` - the host elastic search is running on\r\n* `hydrate` - whether or not to lookup results in mongodb before\r\n  returning results from a search. Defaults to false.\r\n\r\n#### Specifying Different Index and Type\r\nPerhaps you have an existing index and you want to specify the index and\r\ntype used to index your document? No problem!!\r\n\r\n```javascript\r\nvar SupervisorSchema = new Schema({\r\n  name: String\r\n, department: String\r\n});\r\n\r\nSupervisorSchema.plugin(mongoosastic, {index: 'employees', type:'manager'});\r\n\r\nvar Supervisor = mongoose.model('supervisor', SupervisorSchema);\r\n\r\n```\r\n\r\n","tagline":"Index mongoose models into elastic search for kickass searching","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}